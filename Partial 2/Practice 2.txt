#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <random>
#include <stdio.h>
#include <iostream>
#include <time.h>

void sortCPU(int* a, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                int temp = a[j + 1];
                a[j + 1] = a[j];
                a[j] = temp;
            }
        }
    }
}

__global__ void sortGPU(int* a, int n) {

    int tid = threadIdx.x;

    for (int i = 0; i < n; i++) {

        int offset = i % 2;
        int sortLeft = 2 * tid + offset;
        int sortRight = sortLeft + 1;

        if (sortRight < n) {
            if (a[sortLeft] > a[sortRight]) {
                int temp = a[sortLeft];
                a[sortLeft] = a[sortRight];
                a[sortRight] = temp;
            }
        }
        __syncthreads();
    }
}

// h - host - cpu 
// g - global - gpu

// _ - host
// d_ - global
//

int main() {

    int size = 5;
    int* host_a, * result;
    int* dev_a;

    dim3 grid(1);
    dim3 block(size);

    host_a = (int*)malloc(size * sizeof(int));
    result = (int*)malloc(size * sizeof(int));

    cudaMalloc(&dev_a, size * sizeof(size));

    srand(time(NULL));

    for (int i = 0; i < size; i++) {
        int temp = (rand() % (256));
        host_a[i] = temp;
        printf("%d ", host_a[i]);
    }

    cudaMemcpy(dev_a, host_a, size * sizeof(int), cudaMemcpyHostToDevice);

    sortGPU << <grid, block >> > (dev_a, size);
    cudaMemcpy(result, dev_a, size * sizeof(int), cudaMemcpyDeviceToHost);
    sortCPU(host_a, size);

    printf("CPU: \n");

    for (int i = 0; i < size; i++) {
        printf("%d ", host_a[i]);
    }

    printf("GPU: \n");

    for (int i = 0; i < size; i++) {
        printf("%d ", result[i]);
    }

    return 0;

}