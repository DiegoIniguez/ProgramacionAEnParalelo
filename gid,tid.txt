#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>

// h - host
// g - global

using namespace std;

__host__ void check_CUDA_error(const char* e) {
    cudaError_t error;
    cudaDeviceSynchronize();
    error = cudaGetLastError();
    if (error != cudaSuccess)
    {
        printf("\nERROR %d: %s (%s)", error, cudaGetErrorString(error), e);
    }
}
__global__ void idx_calc_tid(int* a) //TID
{
    int tid = threadIdx.x;

    printf("threadx - x: %d, data: %d\n", tid, a[tid]);
}
__global__ void idx_calc_gid(int* a) //gid
{
    int tid = threadIdx.x;
    
    int offset = blockIdx.x * blockDim.x;
    int gid = offset + tid;

    printf("blockIdx - x: %d, threadx - x: %d, gid: %d, data: %d\n", blockIdx.x, tid, gid, a[gid]);
}
__global__ void idx_calc_gid2D(int* a) //gid2d
{
    int tid = threadIdx.x;

    int offsetRow = gridDim.x * blockDim.x * blockIdx.y;
    int offsetBlock = blockIdx.x * blockDim.x;
    int gid = tid + offsetRow + offsetBlock;

    printf("blockIdx - x: %d, threadx - x: %d, gid: %d, data: %d\n", blockIdx.x, tid, gid, a[gid]);
}

int main() {

    const int num = 16;
    int a[num] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    int size = sizeof(int) * num;
    int* d_a;

    cudaMalloc(&d_a, size);
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);

    //TID
    dim3 gridTid(1);
    dim3 blockTid(num, 1, 1);

    printf("TID\n");

    idx_calc_tid << <gridTid, blockTid >> > (d_a);
    check_CUDA_error("Error on kernel launch");
    cudaDeviceSynchronize();

    //GID
    dim3 gridGid(4, 1, 1);
    dim3 blockGid(4, 1, 1);

    printf("GID\n");

    idx_calc_gid << <gridGid, blockGid >> > (d_a);
    check_CUDA_error("Error on kernel launch");
    cudaDeviceSynchronize();

    //GID2D
    dim3 gridGid2D(2, 2, 1);
    dim3 blockGid2D(4, 1, 1);

    printf("GID 2D\n");

    idx_calc_gid2D << <gridGid2D, blockGid2D >> > (d_a);
    check_CUDA_error("Error on kernel launch");
    cudaDeviceSynchronize();

    //Free cuda's memory
    cudaFree(d_a);
    cudaDeviceReset();

    return 0;
}